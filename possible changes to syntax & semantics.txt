Constructors
	-either
		V-"failure" property (returns that type optionally)
			-two possibilities:
				-optional of the type
					-octor
						-need to see if there's a better letter to prepend
				-pointer to the type
					-"fctor"
						-f prepended to the ctor
						-is most of the word factory, as well
		X-allow adding any type on (returns a type that composes that type)
		X-allowing it to handle any natural transformations (maybe not necessary)



Functor operations to add to Y:
	F# name		Type						Y equivalent
	map		(A -> B) -> (M[A] -> M[B])			?

	apply		M[A -> B] -> (M[A] -> M[B])			?

	return		A -> M[A]					constructors

	bind		(A -> M[B]) -> (M[A] -> M[B])			?

	lift2		((A, B) -> C) -> ((M[A], M[B]) -> M[C])		?



Splaying & Multicomposability:
	-maybe allow f(a, b) to be expressed as f(c) where c is of type tuple of A and B
		-(this would go with the inclusion of multicomposability that I've been contemplating)
	-example of splaying:
		f: (A,B,C) -> X
		d: (A,B)
		e: (B,C)
		f(a,b,c) == f(d,c) == f(a,e)
	-example of multicomposability:
		pair: (dt, dt) sdt
		{
			dt#0 l;
			dt#1 r;
		}







Data Type Optimization:
	-allow for optimizing away member variables of a type
		-to allow for allocators in a type without taking space
		-add constant modifier to member variables



Compilation Options:
	-Optimization Levels:
		-None
		-Constants
		-Data Type and Inlining
	-constant boole DEBUGGING



Procedure Mutability:
	-now:
		-default
		-system
		-static
	-add modifiers to help with globals



Because of the focus on abstraction and saying what you mean, abstract scoped procedures don't only "template" in the types of the parameters.
	-They can be called at runtime with the simple compiler transform of parameters changing into immutable pointers to those parameters.
	-Also, this makes the implicit "this" parameter of types from an immutable pointer to the type into just being of the type it's in.

