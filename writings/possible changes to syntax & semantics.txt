Constructors
	-either
		V-"failure" property (returns that type optionally)
			-two possibilities:
				-optional of the type
					-octor
						-need to see if there's a better letter to prepend
				-pointer to the type
					-"fctor"
						-f prepended to the ctor
						-is most of the word factory, as well
		X-allow adding any type on (returns a type that composes that type)
		X-allowing it to handle any natural transformations (maybe not necessary)



Functor operations to add to Y:
	F# name		Type						Y equivalent
	map		(A -> B) -> (M[A] -> M[B])			?

	apply		M[A -> B] -> (M[A] -> M[B])			?

	return		A -> M[A]					constructors

	bind		(A -> M[B]) -> (M[A] -> M[B])			?

	lift2		((A, B) -> C) -> ((M[A], M[B]) -> M[C])		?

Note:		map f x = bind return f x
AKA:		map f x = flatMap pure f x



Splaying & Multicomposability:
	-maybe allow f(a, b) to be expressed as f(c) where c is of type tuple of A and B
		-(this would go with the inclusion of multicomposability that I've been contemplating)
	-example of splaying:
		f: (A,B,C) -> X
		d: (A,B)
		e: (B,C)
		f(a,b,c) == f(d,c) == f(a,e)
	-example of multicomposability:
		pair: (dt, dt) sdt
		{
			dt#0 l;
			dt#1 r;
		}







Data Type Optimization:
	-allow for optimizing away member variables of a type
		-to allow for allocators in a type without taking space
		-add constant modifier to member variables



Compilation Options:
	-Optimization Levels:
		-None
		-Constants
		-Data Type and Inlining
	-constant boole DEBUGGING



Procedure Mutability Properties:
	-static
	-local
		-the default unless a procedure of unspecified mutability is a parameter
	-module
		-find whether a different fourth property would be more useful
	-global



Because of the focus on abstraction and saying what you mean, abstract scoped procedures don't only "template" in the types of the parameters.
	-They can be called at runtime with the simple compiler transform of parameters changing into immutable pointers to those parameters.
	-Also, this makes the implicit "this" parameter of types from an immutable pointer to the type into just being of the type it's in.



make it easier to use member procedures as arguments to procedures
	-perhaps allow ctor, dtor, et cetera to be used as such:	`somelist.map(dtor);`
	-find some syntax to reference them that's easier than wrapping in another procedure
		-perchance, `l_list:map` so `list_of_lists.map(list:empty);`
	-maybe some hyperexpressions can also be used as procedures with the obvious, trivial implementations:	`ptr_list.map(free);`



switch & choice statements
	-If a statement doesn't have a default case, err if not all cases are checked; otherwise, note how many cases the default case accounts for.
		-instead of specifying the number of unchecked cases in the default case of a switch or choice statement
		-allows for easier use of them as an equality check with types that have an arbitrary number of states
	-maybe use "else" instead of "default"



maybe use '#' syntax for just derived types
	-instead of resolving both derived types and SA parameters
	-maybe then allow the SA vector to have zero length to deal with all cases
		-example:	associative operator group#0 binary_+(group[n] a, group#0[m] b);



thinking about it, types that have the constant property have an odd relation to inheritance
	-their supertype should be `constant dt`, not `dt`
		-of course, because such types are like they always appear with `constant` before them
			-`stream` is as if it was written `constant stream`



partial application hyperexpression
	-takes a call expression
		-example: constant capture(number#0 vector[n] << number vector[n]) w = partial{ vector:map(_, factorial) };
	-underscores in the call to the enclosed procedure aren't errors, but encode the input type to the resultant procedure
		-maybe change to dashes or allow both
	-maybe change keyword to capture since that is what it's doing, essentially
		-example: constant capture(natural[]<<) q = capture{ natural:multiplication(5, 37) };
		-maybe make partial application a bigger part by removing the need for the hyperexpression except in cases where the procedure has no input
			-example: constant capture(number#0 vector[n] << number vector[n]) w = vector:map(-, factorial);
			-example: constant capture(natural[]<<) q = capture{ 5 * 37 };
	-technically allows lambdas, I guess
		-isn't as bad as random lambdas since the main call is clearly defined



perhaps make a reversed composition operator that has the same glyph ("|>") as the reversed call operator
	-make both left associative so if a datum is provided at the beginning of an expression, all become reversed call operators instead of mixed reversed call and reversed composition
	-if I have the infix call operator ("<|"), perhaps make it also the normal composition operator
		-as well as "<>" or instead
	-or does call versus composition need to be differentiated at its use?
		-yes, call need be differentiated since Y is an eagerly evaluated language, and call is evaluated at runtime, but composition can be evaluated at compiletime



optimization that allows construction of a choice statement at compiletime
	-do I need this for the compiler?
	-is this all that useful?
	-example:
		loop (immutable integer i, N)
		{
			if (something-immutable == f(i))
			{
				p(i)();
			}
		}
	-maybe an array approach would be better to change into a choice statement
		-maybe make it the indexed map member procedure of fixed-list or a fixed, distinct list



allow if and choice expressions
	-since I do have parallel blocks and expressions
	-unless a library procedure that uses an array approach works as well
	-like the parallel keyword, when expecting a statement, whether an if or choice is an expression or statement is based solely on whether what's inside its braces is an expression or statement
		-except that in the case of if and choice that don't have braces, those are always statements



remove braceless if statements
	-do I need braceless conditionals and loops if I have partial application and procedures that can return procedures?



wrapper types
	-don't need type IDs as they do not last to runtime
	-essentially, either
		-plays the role of some simple macros
			-like a reference wrapper type that simple holds a link and defines assignment to actually assign the referenced address
		-differentiates types at compiletime that would otherwise be the same
			-like destination and source wrapper types for use in something like memcpy
	-has to have only one non-consant member variable
	-can't have the class property
	-can automatically convert to the wrapped type



make the procedure/turing type's input and output both be tuples
	-importantly, procedure types that return nothing automatically convert to returning an empty tuple
		-example:
			(<<string) ----> (() << (string))
		-since an empty tuple has no information like nothing, an automatic conversion cannot mess with anything
		-also, this is necessary since you cannot return an empty tuple by hand
		-same with input
	-makes the types uniform which simplifies uses of abstract procedure/turing types such as combinators and the like



if I can have types as values, I can define size abstraction concretization as the subscript operator for the type type



need to revert slightly the move of become to a value property
	-because of incompatibility with higher order procedures
		-maybe also reducing duplication of types near the top of the hierarchy
	-instead just optimize what the link type references into registers and add the wrapper type mentioned above 
	-also most likely need to change the moved parameter property into a type for the same reason 



