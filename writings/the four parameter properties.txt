Parameter Properties
	-default
		-copies
	-become
		-doesn't copy
	-moved
		-doesn't copy

-note, the default can also be moved into to remove the copying; this is done by default when it's the last use in the procedure of what's passed in

-note, immutable/constant parameters don't copy, but immutable and constant are no longer parameter properties; however, the root type of a parameter being immutable or constant (clearly at the declaration) precludes the parameter from having the become or moved property
	-because as parameters that have immutable or constant root type the compiler gives them the become property to optimize their use
	-maybe warn of the redundancy instead of erring

======Example======



normal(natural[] a)				//makes copy
{
	if (a > 100) a = a/100;
}

by_constantness(immutable integer[] i)		//doesn't make copy
{
	//i = 2;	//error: is immutable
	if (i < -4)
		proc();
}

sort(integer[] array become arr)		//doesn't make copy
{
	// . . .
}

take(natural[] list moved l)			//doesn't make copy
{
	l.dtor();
}

main()
{
	integer[] array pointer p = api>calculate();
	sort(p);

	integer[] array arr = {-1, 4, -500, 2};		//assume is in xmm0/ymm0/zmm0 x86 SIMD register
	sort(&arr);
	arr[2] = 0;

	natural[] r_array q = ctor(array{1, 6, 2});
	natural[] r_array w = move{q}.append(9);	//q becomes uninitialized again
	take(move{w});					//w becomes uninitialized again
	//w.dtor();					//error: w is uninitialized
}

