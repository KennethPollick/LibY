To Slice
	slice: dt ndt
	{
		dt#0 array pointer arr;		//array's SA type information erased
		natural[] length;
	}



Not To Slice
	-new properties
		-coalesce-from and coalesce-to names
			integer[] array pointer arr;		----->		integer[] coalesce-from array coalesce-to pointer arr;
		-symbolic names
			integer[] array pointer arr;		----->		integer[] array> <pointer arr;

	-just use a defined size abstraction to coalesce onto the pointer
		-instead of making new syntax
		-is more like older, terser syntax
		-allows for 'slicing' of many levels at once
		-example:	sort(natural[B] array[n] become arr);
		-also works with the become property
		-note, this does make it that whether a parameter has defined size abstraction determines whether the parameter can accept whole objects or parts
			-can take only a full array
				sort(natural[B] array link arr);
			-can take subarrays as well
				sort(natural[B] array[n] link arr);
		-this eagerly coalesces if able
			-maybe add a property to stop coalescing if you want a variable to stay small for one reason or another
				-property bannister
					-stops type information of the types composed from coalescing onto the type modified
					-example: natural[B] array[n] bannister link arr;

